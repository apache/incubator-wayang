/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.wayang.api.python;

import java.util.List;
import java.nio.file.Paths;

import org.apache.wayang.api.python.executor.PythonProcessCaller;
import org.apache.wayang.api.python.function.WrappedMapPartitionsDescriptor;
import org.apache.wayang.api.python.function.WrappedPredicateDescriptor;

import org.apache.wayang.core.api.Configuration;
import org.apache.wayang.core.types.BasicDataUnitType;

import org.junit.jupiter.api.Test;

import com.google.protobuf.ByteString;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class PythonApiTests {
    @Test
    void processCallerSocketTest() {
        final Configuration configuration = new Configuration();
        final String path = Paths.get("python/worker.py").toString();
        
        configuration.setProperty("wayang.api.python.worker", path);

        final PythonProcessCaller processCaller = new PythonProcessCaller();

        assertTrue(processCaller.getSocket().isConnected());
        assertTrue(processCaller.isReady());

        processCaller.close();
    }

    @Test
    void WrappedMapPartitionsDescriptorTest() throws Exception {
        // udf from map partition in /python/filter_test.py
        final String base64udf =
        "gAWVXw0AAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwNX2J1aWx0aW5fdHlwZZSTlIwKTWV0aG9kVHlwZZSFlFKUjBNweXd5LmNvcmUuZnVuY3Rpb25zlIwYQ2hhaW5lZEZ1bmN0aW9ucy5leGVjdXRllJOUaAaMEENoYWluZWRGdW5jdGlvbnOUk5QpgZR9lIwJZnVuY3Rpb25zlF2UKGgFjBRweXd5Lm9wZXJhdG9ycy51bmFyeZSMFkZpbHRlck9wZXJhdG9yLmdldF91ZGaUk5RoD4wORmlsdGVyT3BlcmF0b3KUk5QpgZR9lCiMBG5hbWWUjBNGaWx0ZXJPcGVyYXRvclVuYXJ5lIwDY2F0lIwFdW5hcnmUjAZpbnB1dHOUSwGMB291dHB1dHOUSwGMDWlucHV0T3BlcmF0b3KUXZSMFXB5d3kub3BlcmF0b3JzLnNvdXJjZZSMDlRleHRGaWxlU291cmNllJOUKYGUfZQoaBaMDlRleHRGaWxlU291cmNllGgYjAVpbnB1dJRoGksAaBtLAWgcXZSMDm91dHB1dE9wZXJhdG9ylF2UaBRhjAppbnB1dF90eXBllE6MC291dHB1dF90eXBllIwIYnVpbHRpbnOUjANzdHKUk5SMBHBhdGiUjB5maWxlOi8vL3Zhci93d3cvaHRtbC9SRUFETUUubWSUjAlqc29uX25hbWWUjA10ZXh0RmlsZUlucHV0lHViYWgmXZRoD4wPRmxhdG1hcE9wZXJhdG9ylJOUKYGUfZQoaBaMFEZsYXRtYXBPcGVyYXRvclVuYXJ5lGgYaBloGksBaBtLAWgcXZRoFGFoJl2UaA+MC01hcE9wZXJhdG9ylJOUKYGUfZQoaBaMEE1hcE9wZXJhdG9yVW5hcnmUaBhoGWgaSwFoG0sBaBxdlGg0YWgmXZSMFXB5d3kub3BlcmF0b3JzLmJpbmFyeZSMDEpvaW5PcGVyYXRvcpSTlCmBlH2UKGgWjBJKb2luT3BlcmF0b3JCaW5hcnmUaBiMBmJpbmFyeZRoGksCaBtLAWgcXZQoaDtoOimBlH2UKGgWjBBNYXBPcGVyYXRvclVuYXJ5lGgYaBloGksBaBtLAWgcXZRoEymBlH2UKGgWjBNGaWx0ZXJPcGVyYXRvclVuYXJ5lGgYaBloGksBaBtLAWgcXZRoICmBlH2UKGgWjA5UZXh0RmlsZVNvdXJjZZRoGGgkaBpLAGgbSwFoHF2UaCZdlGhMYWgoTmgpaCxoLWguaC9oMHViYWgmXZRoSGFoKGgsaCloLIwJcHJlZGljYXRllGgAjA5fbWFrZV9mdW5jdGlvbpSTlChoAowIQ29kZVR5cGWUhZRSlChLAUsASwBLAUsCS1NDCGQBfABrBlMAlE6MBldheWFuZ5SGlCmMAXeUhZSMDmZpbHRlcl90ZXN0LnB5lIwIPGxhbWJkYT6USyBDAJQpKXSUUpR9lCiMC19fcGFja2FnZV9flE6MCF9fbmFtZV9flIwIX19tYWluX1+UjAhfX2ZpbGVfX5RoYXVOTk50lFKUaACMEl9mdW5jdGlvbl9zZXRzdGF0ZZSTlGhsfZR9lChoaGhijAxfX3F1YWxuYW1lX1+UjC9UZXN0V0NQbGFuVG9Kc29uLnRlc3RfdG9fanNvbi48bG9jYWxzPi48bGFtYmRhPpSMD19fYW5ub3RhdGlvbnNfX5R9lIwOX19rd2RlZmF1bHRzX1+UTowMX19kZWZhdWx0c19flE6MCl9fbW9kdWxlX1+UaGmMB19fZG9jX1+UTowLX19jbG9zdXJlX1+UTowXX2Nsb3VkcGlja2xlX3N1Ym1vZHVsZXOUXZSMC19fZ2xvYmFsc19flH2UdYaUhlIwaC+MBmZpbHRlcpR1YmFoJl2UaENhaChoLGgpaCqMA2ludJSTlGgshpSMCGZ1bmN0aW9ulGhYKGhbKEsBSwBLAEsBSwJLU0MMdAB8AIMBfABmAlMAlE6FlIwDbGVulIWUaGBoYWhiSyFoYykpdJRSlGhmTk5OdJRSlGhuaIx9lH2UKGhoaGJocWhyaHN9lGh1Tmh2Tmh3aGloeE5oeU5oel2UaHx9lHWGlIZSMGgvjANtYXCUdWJlaCZdlIwTcHl3eS5vcGVyYXRvcnMuc2lua5SMDFRleHRGaWxlU2lua5STlCmBlH2UKGgWjAxUZXh0RmlsZVNpbmuUaBiMBm91dHB1dJRoGksBaBtLAGgcXZRoQ2FoJl2UaChOaClOaC2MMmZpbGU6Ly8vdmFyL3d3dy9odG1sL2RhdGEvd29yZGNvdW50LW91dC1weXRob24udHh0lGgvjA50ZXh0RmlsZU91dHB1dJR1YmFoKGiCaCyGlGgpaKBooIaUjBF0aGlzX2tleV9mdW5jdGlvbpRoWChoWyhLAUsASwBLAUsFSxNDEogAdACgAXQCfACDAaEBgwFTAJROhZSMA2FzdJSMDGxpdGVyYWxfZXZhbJSMBG5leHSUh5SMAWeUhZSMPy91c3IvbG9jYWwvbGliL3B5dGhvbjMuOC9kaXN0LXBhY2thZ2VzL3B5d3kvb3BlcmF0b3JzL2JpbmFyeS5weZRoYks6aGNoooWUKXSUUpR9lChoZ4wOcHl3eS5vcGVyYXRvcnOUaGhoQGhqjD8vdXNyL2xvY2FsL2xpYi9weXRob24zLjgvZGlzdC1wYWNrYWdlcy9weXd5L29wZXJhdG9ycy9iaW5hcnkucHmUdU5OaACMEF9tYWtlX2VtcHR5X2NlbGyUk5QpUpSFlHSUUpRobmi3fZR9lChoaGhiaHGMJ0pvaW5PcGVyYXRvci5fX2luaXRfXy48bG9jYWxzPi48bGFtYmRhPpRoc32UaHVOaHZOaHdoQGh4Tmh5aACMCl9tYWtlX2NlbGyUk5RoWChoWyhLAUsASwBLAUsCS1NDCHwAZAEZAFMAlE5LAIaUKWhgaGFoYksiaGMpKXSUUpRoZk5OTnSUUpRobmjDfZR9lChoaGhiaHFocmhzfZRodU5odk5od2hpaHhOaHlOaHpdlGh8fZR1hpSGUjCFlFKUhZRoel2UaHx9lGilaACMCXN1YmltcG9ydJSTlGilhZRSlHN1hpSGUjCMBHRoYXSUjA9weXd5LmRhdGFxdWFudGGUjApEYXRhUXVhbnRhlJOUKYGUfZQojAhvcGVyYXRvcpRoSIwHY29udGV4dJRo1YwNV2F5YW5nQ29udGV4dJSTlCmBlH2UKIwHcGx1Z2luc5SPlCiMDnB5d3kuY29yZS5jb3JllIwGUGx1Z2lulJOUKYGUfZSMCXBsYXRmb3Jtc5SPlCiMEnB5d3kuY29yZS5wbGF0Zm9ybZSMCFBsYXRmb3JtlJOUKYGUfZRoFowEamF2YZRzYpBzYmjkKYGUfZRo54+UKGjrKYGUfZRoFowFc3BhcmuUc2KQc2KQjA1jb25maWd1cmF0aW9ulIwScHl3eS5jb25maWd1cmF0aW9ulIwNQ29uZmlndXJhdGlvbpSTlCmBlH2UjAdlbnRyaWVzlH2Uc2J1YnVijBF0aGF0X2tleV9mdW5jdGlvbpRoWChoWyhLAUsASwBLAUsFSxNDEogAdACgAXQCfACDAaEBgwFTAJRopGioaKpoq2hiSzxoY2j9hZQpdJRSlGivTk5osylSlIWUdJRSlGhuagUBAAB9lH2UKGhoaGJocWi6aHN9lGh1Tmh2Tmh3aEBoeE5oeWi9aFgoaMFoZk5OTnSUUpRobmoKAQAAfZR9lChoaGhiaHFocmhzfZRodU5odk5od2hpaHhOaHlOaHpdlGh8fZR1hpSGUjCFlFKUhZRoel2UaHx9lGilaNJzdYaUhlIwaC+MBGpvaW6UdWJhaChoLGgpaIJoLIaUaIRoWChoWyhLAUsASwBLAUsCS1NDDHQAfACDAXwAZgJTAJRohmiIaGBoYWhiSx5oYykpdJRSlGhmTk5OdJRSlGhuah0BAAB9lH2UKGhoaGJocWhyaHN9lGh1Tmh2Tmh3aGloeE5oeU5oel2UaHx9lHWGlIZSMGgvaJN1YmFoKGgsaCloLIwLZm1fZnVuY3Rpb26UaFgoaFsoSwFLAEsASwFLAktTQwh8AKAAoQBTAJRohowFc3BsaXSUhZRoYGhhaGJLHWhjKSl0lFKUaGZOTk50lFKUaG5qKwEAAH2UfZQoaGhoYmhxaHJoc32UaHVOaHZOaHdoaWh4Tmh5Tmh6XZRofH2UdYaUhlIwaC+MB2ZsYXRNYXCUdWJhaChoLGgpaCxoVmhYKGhbKEsBSwBLAEsBSwJLU0MIZAF8AGsGUwCUTowGQXBhY2hllIaUKWhgaGFoYkscaGMpKXSUUpRoZk5OTnSUUpRobmo5AQAAfZR9lChoaGhiaHFocmhzfZRodU5odk5od2hpaHhOaHlOaHpdlGh8fZR1hpSGUjBoL2h/dWKGlFKUaAVoD4wXRmxhdG1hcE9wZXJhdG9yLmdldF91ZGaUk5RoNIaUUpRoBWgPjBNNYXBPcGVyYXRvci5nZXRfdWRmlJOUaDuGlFKUZXNihpRSlC4=";

        final ByteString byteStringUdf = ByteString.copyFrom(base64udf.getBytes());

        final WrappedMapPartitionsDescriptor<String, String> descriptor = new WrappedMapPartitionsDescriptor<>(
                byteStringUdf,
                BasicDataUnitType.createBasic(String.class),
                BasicDataUnitType.createBasic(String.class));

        final Iterable<String> input = List.of("wayang");

        assertTrue(descriptor.getJavaImplementation().apply(input) != null);
    }

    @Test
    void WrappedPredicateDescriptorTest() throws Exception {
        // udf from map in /python/join_test.py
        final String base64udf = "gAWVmAoAAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwNX2J1aWx0aW5fdHlwZZSTlIwKTWV0aG9kVHlwZZSFlFKUjBRweXd5Lm9wZXJhdG9ycy51bmFyeZSME01hcE9wZXJhdG9yLmdldF91ZGaUk5RoBowLTWFwT3BlcmF0b3KUk5QpgZR9lCiMBG5hbWWUjBBNYXBPcGVyYXRvclVuYXJ5lIwDY2F0lIwFdW5hcnmUjAZpbnB1dHOUSwGMB291dHB1dHOUSwGMDWlucHV0T3BlcmF0b3KUXZSMFXB5d3kub3BlcmF0b3JzLnNvdXJjZZSMDlRleHRGaWxlU291cmNllJOUKYGUfZQoaA2MDlRleHRGaWxlU291cmNllGgPjAVpbnB1dJRoEUsAaBJLAWgTXZSMDm91dHB1dE9wZXJhdG9ylF2UaAthjAppbnB1dF90eXBllE6MC291dHB1dF90eXBllIwIYnVpbHRpbnOUjANzdHKUk5SMBHBhdGiUjCNmaWxlOi8vL3Zhci93d3cvaHRtbC9kYXRhL3JpZ2h0LmNzdpSMCWpzb25fbmFtZZSMDXRleHRGaWxlSW5wdXSUdWJhaB1dlIwVcHl3eS5vcGVyYXRvcnMuYmluYXJ5lIwMSm9pbk9wZXJhdG9ylJOUKYGUfZQoaA2MEkpvaW5PcGVyYXRvckJpbmFyeZRoD4wGYmluYXJ5lGgRSwJoEksBaBNdlChoCimBlH2UKGgNjBBNYXBPcGVyYXRvclVuYXJ5lGgPaBBoEUsBaBJLAWgTXZRoFymBlH2UKGgNjA5UZXh0RmlsZVNvdXJjZZRoD2gbaBFLAGgSSwFoE12UaB1dlGgxYWgfTmggaCNoJIwiZmlsZTovLy92YXIvd3d3L2h0bWwvZGF0YS9sZWZ0LmNzdpRoJmgndWJhaB1dlGgsYWgfaCGMA2ludJSTlGgjhpRoIGg9aCOGlIwIZnVuY3Rpb26UaACMDl9tYWtlX2Z1bmN0aW9ulJOUKGgCjAhDb2RlVHlwZZSFlFKUKEsBSwBLAEsBSwRLU0MOdAB8AKABZAGhAYMBUwCUTowBLJSGlIwFdHVwbGWUjAVzcGxpdJSGlIwBeJSFlIwMam9pbl90ZXN0LnB5lIwIPGxhbWJkYT6USx5DAJQpKXSUUpR9lCiMC19fcGFja2FnZV9flE6MCF9fbmFtZV9flIwIX19tYWluX1+UjAhfX2ZpbGVfX5RoTnVOTk50lFKUaACMEl9mdW5jdGlvbl9zZXRzdGF0ZZSTlGhZfZR9lChoVWhPjAxfX3F1YWxuYW1lX1+UjCdUZXN0Sm9pbi50ZXN0X3RvX2pzb24uPGxvY2Fscz4uPGxhbWJkYT6UjA9fX2Fubm90YXRpb25zX1+UfZSMDl9fa3dkZWZhdWx0c19flE6MDF9fZGVmYXVsdHNfX5ROjApfX21vZHVsZV9flGhWjAdfX2RvY19flE6MC19fY2xvc3VyZV9flE6MF19jbG91ZHBpY2tsZV9zdWJtb2R1bGVzlF2UjAtfX2dsb2JhbHNfX5R9lHWGlIZSMGgmjANtYXCUdWJoC2VoHV2UjBNweXd5Lm9wZXJhdG9ycy5zaW5rlIwMVGV4dEZpbGVTaW5rlJOUKYGUfZQoaA2MDFRleHRGaWxlU2lua5RoD4wGb3V0cHV0lGgRSwFoEksAaBNdlGgsYWgdXZRoH05oIE5oJIwtZmlsZTovLy92YXIvd3d3L2h0bWwvZGF0YS9qb2luLW91dC1weXRob24udHh0lGgmjA50ZXh0RmlsZU91dHB1dJR1YmFoH05oIE5OhpSMEXRoaXNfa2V5X2Z1bmN0aW9ulGhCKGhFKEsBSwBLAEsBSwVLE0MSiAB0AKABdAJ8AIMBoQGDAVMAlE6FlIwDYXN0lIwMbGl0ZXJhbF9ldmFslIwEbmV4dJSHlIwBZ5SFlIw/L3Vzci9sb2NhbC9saWIvcHl0aG9uMy44L2Rpc3QtcGFja2FnZXMvcHl3eS9vcGVyYXRvcnMvYmluYXJ5LnB5lGhPSzpoUGh6hZQpdJRSlH2UKGhUjA5weXd5Lm9wZXJhdG9yc5RoVWgpaFeMPy91c3IvbG9jYWwvbGliL3B5dGhvbjMuOC9kaXN0LXBhY2thZ2VzL3B5d3kvb3BlcmF0b3JzL2JpbmFyeS5weZR1Tk5oAIwQX21ha2VfZW1wdHlfY2VsbJSTlClSlIWUdJRSlGhbaI99lH2UKGhVaE9oXownSm9pbk9wZXJhdG9yLl9faW5pdF9fLjxsb2NhbHM+LjxsYW1iZGE+lGhgfZRoYk5oY05oZGgpaGVOaGZoAIwKX21ha2VfY2VsbJSTlGhCKGhFKEsBSwBLAEsBSwRLU0ModABkAXwAmwCdAoMBAQB0AGQCfABkAxkAmwCdAoMBAQB8AGQDGQBTAJQoTowKam9pbiBpdGVtIJSMBWtleToglEsAdJSMBXByaW50lIWUjARpdGVtlIWUaE6MCGpvaW5fa2V5lEshQwYAAQ4BEgKUKSl0lFKUaFNOTk50lFKUaFtoo32UfZQoaFVonmhejCdUZXN0Sm9pbi50ZXN0X3RvX2pzb24uPGxvY2Fscz4uam9pbl9rZXmUaGB9lChonGg9aCOGlIwGcmV0dXJulGg9dWhiTmhjTmhkaFZoZU5oZk5oZ12UaGl9lHWGlIZSMIWUUpSFlGhnXZRoaX2UaH1oAIwJc3ViaW1wb3J0lJOUaH2FlFKUc3WGlIZSMIwEdGhhdJSMD3B5d3kuZGF0YXF1YW50YZSMCkRhdGFRdWFudGGUk5QpgZR9lCiMCG9wZXJhdG9ylGgLjAdjb250ZXh0lGi4jA1XYXlhbmdDb250ZXh0lJOUKYGUfZQojAdwbHVnaW5zlI+UKIwOcHl3eS5jb3JlLmNvcmWUjAZQbHVnaW6Uk5QpgZR9lIwJcGxhdGZvcm1zlI+UKIwScHl3eS5jb3JlLnBsYXRmb3JtlIwIUGxhdGZvcm2Uk5QpgZR9lGgNjARqYXZhlHNikHNiaMcpgZR9lGjKj5QoaM4pgZR9lGgNjAVzcGFya5RzYpBzYpCMDWNvbmZpZ3VyYXRpb26UjBJweXd5LmNvbmZpZ3VyYXRpb26UjA1Db25maWd1cmF0aW9ulJOUKYGUfZSMB2VudHJpZXOUfZRzYnVidWKMEXRoYXRfa2V5X2Z1bmN0aW9ulGhCKGhFKEsBSwBLAEsBSwVLE0MSiAB0AKABdAJ8AIMBoQGDAVMAlGh8aIBogmiDaE9LPGhQaOCFlCl0lFKUaIdOTmiLKVKUhZR0lFKUaFto6H2UfZQoaFVoT2heaJJoYH2UaGJOaGNOaGRoKWhlTmhmaJVoo4WUUpSFlGhnXZRoaX2UaH1otXN1hpSGUjBoJowEam9pbpR1YmFoH2g9aCOGlGggaD1oI4aUaEBoQihoRShLAUsASwBLAUsES1NDDnQAfACgAWQBoQGDAVMAlGhIaEtoTWhOaE9LH2hQKSl0lFKUaFNOTk50lFKUaFto+X2UfZQoaFVoT2heaF9oYH2UaGJOaGNOaGRoVmhlTmhmTmhnXZRoaX2UdYaUhlIwaCZobHVihpRSlC4=";


        final ByteString byteStringUdf = ByteString.copyFrom(base64udf.getBytes());

        /*
            public WrappedPredicateDescriptor(
            final ByteString serializedUDF,
            final BasicDataUnitType<Input> inputTypeClass,
            final ProbabilisticDoubleInterval selectivity,
            final LoadProfileEstimator udfLoad) {
         */
        final WrappedPredicateDescriptor<Integer> descriptor = new WrappedPredicateDescriptor<>(
                byteStringUdf,
                BasicDataUnitType.createBasic(Integer.class),
                null,
                null);

        //TODO: for some reason this is always false
        assertFalse(descriptor.getJavaImplementation().test(0));
    }
}
